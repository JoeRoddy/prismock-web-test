"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupBy = groupBy;
const helpers_1 = require("../../helpers");
const aggregate_1 = require("../aggregate");
const find_1 = require("../find");
const match_1 = require("../find/match");
function groupBy(args, current, delegates) {
    const by = Array.isArray(args.by) ? args.by : [args.by];
    const items = (0, find_1.findMany)({ where: args.where }, current, delegates);
    const grouped = divideIntoGroups(args, by, items);
    const filtered = having(grouped, args.having, current, delegates);
    const ordered = orderWithAggregates(filtered, args, current, delegates);
    return ordered.map((group) => extractDesiredFields(args, group));
}
function having(items, arg, current, delegates) {
    if (arg === undefined) {
        return items;
    }
    const flattenedArg = flattenHaving(arg);
    return items.filter(({ havingValue }) => {
        const result = (0, match_1.matchMultiple)(havingValue, flattenedArg, current, delegates);
        return result;
    });
}
function flattenHaving(having) {
    return Object.fromEntries(Object.entries(having).flatMap(([key, value]) => {
        if (['AND', 'OR', 'NOT'].includes(key)) {
            return [[key, (0, helpers_1.ensureArray)(value).map((v) => flattenHaving(v))]];
        }
        if (typeof value === 'object') {
            const hasAgg = Object.keys(value).some((k) => k.startsWith('_'));
            if (!hasAgg) {
                return [[key, value]];
            }
            return Object.entries(value).map(([nestedKey, nestedValue]) => {
                return [key + nestedKey, nestedValue];
            });
        }
        return [[key, value]];
    }));
}
function orderWithAggregates(groups, args, delegate, delegates) {
    if (!args.orderBy)
        return groups;
    const propertiesToOrderBy = Array.isArray(args.orderBy) ? args.orderBy : [args.orderBy];
    const o = propertiesToOrderBy.reduceRight((accumulator, currentValue) => {
        const acc = accumulator.sort((a, b) => (0, find_1.calculateOrder)(a.orderByValue, b.orderByValue, currentValue, delegate, delegates));
        return acc;
    }, groups);
    return o;
}
function extractDesiredFields(args, { groupKey, items }) {
    return Object.assign(Object.assign({}, groupKey), (0, aggregate_1.aggregate)(Object.assign(Object.assign({}, args), { cursor: undefined }), items));
}
function divideIntoGroups(args, by, items) {
    return items
        .reduce((groups, item) => {
        const itemKey = (0, helpers_1.pick)(item, by);
        let group = groups.find(([groupKey]) => (0, helpers_1.shallowCompare)(groupKey, itemKey));
        if (!group) {
            group = [itemKey, [item]];
            groups.push(group);
        }
        else {
            group[1].push(item);
        }
        return groups;
    }, [])
        .map(([groupKey, items]) => {
        return {
            groupKey,
            items,
            orderByValue: buildOrderByValue(args, groupKey, items),
            havingValue: buildHavingValue(args, groupKey, items),
        };
    });
}
function buildOrderByValue(args, groupKey, items) {
    if (args.orderBy === undefined) {
        return {};
    }
    const aggregateArgs = (0, helpers_1.ensureArray)(args.orderBy).reduce((agg, each) => Object.entries(each).filter(([key]) => key.startsWith('_')).reduce((agg, [aggregation, fields]) => {
        return Object.assign(agg, mergeAggregateArg(aggregation, agg[aggregation], fields));
    }, agg), {});
    return Object.assign(Object.assign({}, groupKey), (0, aggregate_1.aggregate)(aggregateArgs, items));
}
function extractDesiredHavingAggregates(having, result = {}) {
    return Object.entries(having).reduce((agg, [field, value]) => {
        if (['AND', 'OR', 'NOT'].includes(field)) {
            return (0, helpers_1.ensureArray)(value).reduce((a, each) => extractDesiredHavingAggregates(each, a), agg);
        }
        else {
            Object.keys(value)
                .filter((k) => k.startsWith('_'))
                .forEach((aggregation) => {
                var _a;
                const aggKey = aggregation;
                agg[aggKey] = ((_a = agg[aggKey]) !== null && _a !== void 0 ? _a : []).concat([field]);
            });
            return agg;
        }
    }, result);
}
function buildHavingValue(args, groupKey, items) {
    if (args.having === undefined) {
        return {};
    }
    const desiredAggregates = extractDesiredHavingAggregates(args.having);
    const aggregateArgs = Object.fromEntries(Object.entries(desiredAggregates).map(([field, aggregates]) => [
        field,
        Object.fromEntries((0, helpers_1.unique)(aggregates).map((agg) => [agg, true])),
    ]));
    return Object.assign(Object.assign({}, groupKey), flattenAggregate((0, aggregate_1.aggregate)(aggregateArgs, items)));
}
function flattenAggregate(aggregate) {
    const result = {};
    Object.entries(aggregate).forEach(([aggregate, fields]) => {
        Object.entries(fields).forEach(([field, value]) => {
            result[field + aggregate] = value;
        });
    });
    return result;
}
function mergeAggregateArg(aggregation, aggregate, value) {
    const valueToProcess = aggregate
        ? Object.keys(value).reduce((agg, key) => Object.assign(agg, { [key]: true }), aggregate)
        : value;
    return {
        [aggregation]: Object.fromEntries(Object.keys(valueToProcess).map((k) => [k, true])),
    };
}
//# sourceMappingURL=data:application/json;base64,