import { ensureArray, pick, shallowCompare, unique } from '../../helpers';
import { aggregate } from '../aggregate';
import { calculateOrder, findMany } from '../find';
import { matchMultiple } from '../find/match';
export function groupBy(args, current, delegates) {
    const by = Array.isArray(args.by) ? args.by : [args.by];
    const items = findMany({ where: args.where }, current, delegates);
    const grouped = divideIntoGroups(args, by, items);
    const filtered = having(grouped, args.having, current, delegates);
    const ordered = orderWithAggregates(filtered, args, current, delegates);
    return ordered.map((group) => extractDesiredFields(args, group));
}
function having(items, arg, current, delegates) {
    if (arg === undefined) {
        return items;
    }
    const flattenedArg = flattenHaving(arg);
    return items.filter(({ havingValue }) => {
        const result = matchMultiple(havingValue, flattenedArg, current, delegates);
        return result;
    });
}
function flattenHaving(having) {
    return Object.fromEntries(Object.entries(having).flatMap(([key, value]) => {
        if (['AND', 'OR', 'NOT'].includes(key)) {
            return [[key, ensureArray(value).map((v) => flattenHaving(v))]];
        }
        if (typeof value === 'object') {
            const hasAgg = Object.keys(value).some((k) => k.startsWith('_'));
            if (!hasAgg) {
                return [[key, value]];
            }
            return Object.entries(value).map(([nestedKey, nestedValue]) => {
                return [key + nestedKey, nestedValue];
            });
        }
        return [[key, value]];
    }));
}
function orderWithAggregates(groups, args, delegate, delegates) {
    if (!args.orderBy)
        return groups;
    const propertiesToOrderBy = Array.isArray(args.orderBy) ? args.orderBy : [args.orderBy];
    const o = propertiesToOrderBy.reduceRight((accumulator, currentValue) => {
        const acc = accumulator.sort((a, b) => calculateOrder(a.orderByValue, b.orderByValue, currentValue, delegate, delegates));
        return acc;
    }, groups);
    return o;
}
function extractDesiredFields(args, { groupKey, items }) {
    return {
        ...groupKey,
        ...aggregate({ ...args, cursor: undefined }, items),
    };
}
function divideIntoGroups(args, by, items) {
    return items
        .reduce((groups, item) => {
        const itemKey = pick(item, by);
        let group = groups.find(([groupKey]) => shallowCompare(groupKey, itemKey));
        if (!group) {
            group = [itemKey, [item]];
            groups.push(group);
        }
        else {
            group[1].push(item);
        }
        return groups;
    }, [])
        .map(([groupKey, items]) => {
        return {
            groupKey,
            items,
            orderByValue: buildOrderByValue(args, groupKey, items),
            havingValue: buildHavingValue(args, groupKey, items),
        };
    });
}
function buildOrderByValue(args, groupKey, items) {
    if (args.orderBy === undefined) {
        return {};
    }
    const aggregateArgs = ensureArray(args.orderBy).reduce((agg, each) => Object.entries(each).filter(([key]) => key.startsWith('_')).reduce((agg, [aggregation, fields]) => {
        return Object.assign(agg, mergeAggregateArg(aggregation, agg[aggregation], fields));
    }, agg), {});
    return {
        ...groupKey,
        ...aggregate(aggregateArgs, items),
    };
}
function extractDesiredHavingAggregates(having, result = {}) {
    return Object.entries(having).reduce((agg, [field, value]) => {
        if (['AND', 'OR', 'NOT'].includes(field)) {
            return ensureArray(value).reduce((a, each) => extractDesiredHavingAggregates(each, a), agg);
        }
        else {
            Object.keys(value)
                .filter((k) => k.startsWith('_'))
                .forEach((aggregation) => {
                const aggKey = aggregation;
                agg[aggKey] = (agg[aggKey] ?? []).concat([field]);
            });
            return agg;
        }
    }, result);
}
function buildHavingValue(args, groupKey, items) {
    if (args.having === undefined) {
        return {};
    }
    const desiredAggregates = extractDesiredHavingAggregates(args.having);
    const aggregateArgs = Object.fromEntries(Object.entries(desiredAggregates).map(([field, aggregates]) => [
        field,
        Object.fromEntries(unique(aggregates).map((agg) => [agg, true])),
    ]));
    return {
        ...groupKey,
        ...flattenAggregate(aggregate(aggregateArgs, items)),
    };
}
function flattenAggregate(aggregate) {
    const result = {};
    Object.entries(aggregate).forEach(([aggregate, fields]) => {
        Object.entries(fields).forEach(([field, value]) => {
            result[field + aggregate] = value;
        });
    });
    return result;
}
function mergeAggregateArg(aggregation, aggregate, value) {
    const valueToProcess = aggregate
        ? Object.keys(value).reduce((agg, key) => Object.assign(agg, { [key]: true }), aggregate)
        : value;
    return {
        [aggregation]: Object.fromEntries(Object.keys(valueToProcess).map((k) => [k, true])),
    };
}
//# sourceMappingURL=data:application/json;base64,