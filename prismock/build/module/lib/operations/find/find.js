import { camelize, pipe } from '../../helpers';
import { matchMultiple } from './match';
export function findNextIncrement(properties, fieldName) {
    const current = properties.increment[fieldName];
    const increment = (current ?? 0) + 1;
    Object.assign(properties.increment, { [fieldName]: increment });
    return increment;
}
export function findOne(args, current, delegates) {
    const found = pipe((items) => items.filter((item) => where(args.where, current, delegates)(item)), order(args, current, delegates), connect(args, current, delegates), paginate(args.skip, args.take))(current.getItems()).at(0);
    if (!found)
        return null;
    return structuredClone(select(args.select)(found));
}
export function where(whereArgs = {}, current, delegates) {
    return (item) => matchMultiple(item, whereArgs, current, delegates);
}
function getOrderedValue(orderedValue) {
    if (typeof orderedValue === 'object') {
        return {
            sortOrder: orderedValue.sort,
            nullOrder: orderedValue.nulls ?? 'last',
        };
    }
    return {
        sortOrder: orderedValue,
        nullOrder: 'last',
    };
}
function isOrderByRelation(orderedProperties) {
    const orderedProperty = Object.keys(orderedProperties)[0];
    return Object.keys(orderedProperties[orderedProperty]).includes('_count');
}
export function calculateOrder(a, b, orderedProperties, current, delegates) {
    for (const orderedProperty in orderedProperties) {
        if (isOrderByRelation(orderedProperties)) {
            const sortOrder = Object.values(orderedProperties[orderedProperty])[0];
            return calculateRelationOrder(a, b, orderedProperty, sortOrder, current, delegates);
        }
        const { nullOrder, sortOrder } = getOrderedValue(orderedProperties[orderedProperty]);
        let weight = 0;
        const weightMultiplier = sortOrder === 'desc' ? -1 : 1;
        const values = [a[orderedProperty], b[orderedProperty]];
        if (values.every((value) => value === null)) {
            return 0;
        }
        else if (values.some((value) => value === null)) {
            if (values[0] === null)
                weight = -1;
            if (values[1] === null)
                weight = 1;
            if (nullOrder === 'last')
                return weight * -1;
            else
                return weight;
        }
        if (typeof values[0] === 'number' && typeof values[1] === 'number') {
            weight = values[0] - values[1];
        }
        if (typeof values[0] === 'string' && typeof values[1] === 'string') {
            weight = values[0].localeCompare(values[1]);
        }
        if (values[0] instanceof Date && values[1] instanceof Date) {
            weight = values[0].getTime() - values[1].getTime();
        }
        if (weight !== 0)
            return weight * weightMultiplier;
    }
    return 0;
}
export function calculateRelationOrder(a, b, orderedProperty, sortOrder, current, delegates) {
    const schema = current.model.fields.find((field) => field.name === orderedProperty);
    if (!schema?.relationName)
        return 0;
    const delegate = getDelegateFromField(schema, delegates);
    const field = getJoinField(schema, delegates);
    const counts = {
        a: findMany({
            where: getFieldFromRelationshipWhere(a, field),
        }, delegate, delegates).length,
        b: findMany({
            where: getFieldFromRelationshipWhere(b, field),
        }, delegate, delegates).length,
    };
    const weightMultiplier = sortOrder === 'desc' ? -1 : 1;
    const weight = counts.a - counts.b;
    if (weight !== 0)
        return weight * weightMultiplier;
    return 0;
}
export function order(args, delegate, delegates) {
    return (items) => {
        if (!args.orderBy)
            return items;
        const propertiesToOrderBy = Array.isArray(args.orderBy) ? args.orderBy : [args.orderBy];
        const o = propertiesToOrderBy.reduceRight((accumulator, currentValue) => {
            const acc = accumulator.sort((a, b) => calculateOrder(a, b, currentValue, delegate, delegates));
            return acc;
        }, items);
        return o;
    };
}
export function paginate(skip, take) {
    return (items) => {
        if (!skip && !take)
            return items;
        return items.slice(skip ?? 0, take === undefined ? undefined : take + (skip ?? 0));
    };
}
export function includes(args, current, delegates) {
    return (item) => {
        if ((!args?.include && !args?.select) || !item)
            return item;
        const newItem = { ...item };
        const obj = args?.select ?? args.include;
        Object.keys(obj)
            .filter((key) => !!obj[key])
            .forEach((key) => {
            const schema = current.model.fields.find((field) => field.name === key);
            if (!schema?.relationName)
                return;
            const delegate = getDelegateFromField(schema, delegates);
            let subArgs = obj[key] === true ? {} : obj[key];
            subArgs = Object.assign(Object.assign({}, subArgs), {
                where: Object.assign(Object.assign({}, subArgs.where), getFieldRelationshipWhere(item, schema, delegates)),
            });
            if (schema.isList) {
                Object.assign(newItem, { [key]: findMany(subArgs, delegate, delegates) });
            }
            else {
                Object.assign(newItem, { [key]: findOne(subArgs, delegate, delegates) });
            }
        });
        return newItem;
    };
}
export function select(selectArgs) {
    return (item) => {
        if (!selectArgs)
            return item;
        return Object.entries(item).reduce((accumulator, [key, value]) => {
            if (selectArgs[key]) {
                accumulator[key] = value;
            }
            return accumulator;
        }, {});
    };
}
export const getJoinField = (field, delegates) => {
    const joinDelegate = Object.values(delegates).find((delegate) => {
        return delegate.model.name === field.type;
    });
    const joinfield = joinDelegate?.model.fields.find((f) => {
        return f.relationName === field.relationName;
    });
    return joinfield;
};
export const getDelegateFromField = (field, delegates) => {
    const delegateName = camelize(field.type);
    return delegates[delegateName];
};
export const getFieldRelationshipWhere = (item, field, delegates) => {
    if (field.relationToFields?.length === 0) {
        field = getJoinField(field, delegates);
        return {
            [field.relationFromFields[0]]: item[field.relationToFields[0]],
        };
    }
    return {
        [field.relationToFields[0]]: item[field.relationFromFields[0]],
    };
};
export const getFieldFromRelationshipWhere = (item, field) => {
    return {
        [field.relationFromFields[0]]: item[field.relationToFields[0]],
    };
};
export const getFieldToRelationshipWhere = (item, field) => {
    return {
        [field.relationToFields[0]]: item[field.relationFromFields[0]],
    };
};
function connect(args, current, delegates) {
    return (items) => {
        return items.reduce((accumulator, currentValue) => {
            const item = pipe(includes(args, current, delegates), select(args.select))(currentValue);
            return [...accumulator, item];
        }, []);
    };
}
export function findMany(args, current, delegates) {
    const found = pipe((items) => items.filter((item) => where(args.where, current, delegates)(item)), order(args, current, delegates), connect(args, current, delegates), paginate(args.skip, args.take))(current.getItems());
    if (args?.distinct) {
        const values = {};
        return found.filter((item) => {
            let shouldInclude = true;
            args.distinct.forEach((key) => {
                const vals = values[key] || [];
                if (vals.includes(item[key])) {
                    shouldInclude = false;
                }
                else {
                    vals.push(item[key]);
                    values[key] = vals;
                }
            });
            return shouldInclude;
        });
    }
    return structuredClone(found);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvb3BlcmF0aW9ucy9maW5kL2ZpbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV4QyxNQUFNLFVBQVUsaUJBQWlCLENBQUMsVUFBOEIsRUFBRSxTQUFpQjtJQUNqRixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVyQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFFaEUsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBYyxFQUFFLE9BQWlCLEVBQUUsU0FBb0I7SUFDN0UsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUNoQixDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3RGLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUMvQixPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsRUFDakMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUMvQixDQUFDLE9BQU8sQ0FBQyxR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